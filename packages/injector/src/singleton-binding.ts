import { Binding, Container, ValueFactory } from './types';


export class SingletonBinding<T, C extends Container> implements Binding<T> {

  /** Value that will eventually be generated by the singleton. */
  private value?: T;

  /**
   * @param factory
   */
  constructor(protected factory: ValueFactory<T, C>) {}

  /**
   * Generates a value from the ``factory`` once. Each subsequent call will
   * return the value that was generated on the first call.
   *
   * @param container
   */
  public resolve(container: C): T {
    if (typeof this.value === 'undefined') {
      this.value = this.factory(container);
    }

    return this.value;
  }

}
