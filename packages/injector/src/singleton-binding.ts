import { Binding, BindingFactory, Container } from './types';

export class SingletonBinding<T> implements Binding<T> {

  /** Value that will eventually be generated by the singleton. */
  private value?: T;

  /**
   * @param factory
   */
  constructor(protected factory: BindingFactory<T>) {}

  /**
   * Generates a value from the ``factory`` once. Each subsequent call will
   * return the value that was generated on the first call.
   *
   * @param container
   */
  public resolve(container: Container): T {
    if (typeof this.value === 'undefined') {
      this.value = this.factory(container);
    }

    return this.value;
  }

}
